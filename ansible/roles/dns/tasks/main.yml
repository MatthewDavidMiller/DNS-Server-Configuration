---
# Credits

- name: Create Pihole container path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create unbound path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-unbound/unbound.conf.d"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create unbound var path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/var-lib-unbound"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create etc-pihole path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-pihole"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create etc-lighttpd path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-lighttpd"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Unbound configuration
  ansible.builtin.template:
    src: unbound_pihole.j2
    dest: "/home/{{ user_name }}/pihole/etc-unbound/unbound.conf"
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Download root hints
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "/home/{{ user_name }}/pihole/var-lib-unbound/root.hints"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: External Config
  ansible.builtin.template:
    src: external.j2
    dest: "/home/{{ user_name }}/pihole/etc-lighttpd/external.conf"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Copy pem file
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ ssl_cert }}/cert_privkey_combined.pem"
    dest: "/home/{{ user_name }}/pihole/etc-lighttpd/cert_privkey_combined.pem"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Pihole Config
  ansible.builtin.template:
    src: setup_vars.j2
    dest: /home/{{ user_name }}/pihole/etc-pihole/setupVars.conf
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create Pihole Container Network
  community.docker.docker_network:
    name: pihole_net
    driver: bridge
    ipam_config:
      - subnet: 172.16.1.0/29

- name: Pihole container
  community.docker.docker_container:
    name: pihole
    image: pihole/pihole:latest
    detach: yes
    volumes:
      - /home/{{ user_name }}/pihole/etc-pihole:/etc/pihole
      - /home/{{ user_name }}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    mounts:
      - type: bind
        source: /home/{{ user_name }}/pihole/etc-lighttpd/external.conf
        target: /etc/lighttpd/external.conf

      - type: bind
        source: /home/{{ user_name }}/pihole/etc-lighttpd/cert_privkey_combined.pem
        target: /etc/lighttpd/cert_privkey_combined.pem
    capabilities:
      - NET_ADMIN
    dns_servers:
      - 172.16.1.3
    networks:
      - name: pihole_net
        ipv4_address: 172.16.1.2
    env:
      TZ: "America/Chicago"
      WEBPASSWORD: "{{ web_password }}"
    published_ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "443:443/tcp"
      - "80:80/tcp"
    restart_policy: unless-stopped
    pull: yes

- name: Unbound container
  community.docker.docker_container:
    name: unbound
    image: debian:stable-slim
    detach: yes
    mounts:
      - type: bind
        source: /home/{{ user_name }}/pihole/etc-unbound/unbound.conf
        target: /etc/unbound/unbound.conf

      - type: bind
        source: /home/{{ user_name }}/pihole/var-lib-unbound/root.hints
        target: /var/lib/unbound/root.hints
    dns_servers:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - name: pihole_net
        ipv4_address: 172.16.1.3
    env:
      TZ: "America/Chicago"
    published_ports:
      - "5353:53/tcp"
      - "5353:53/udp"
    tty: yes
    restart_policy: unless-stopped
    pull: yes
    command: bash -c "apt-get update ; DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::=--force-confold -y unbound ; set -e && /usr/sbin/unbound && sleep infinity"

- name: Clear current databases
  ansible.builtin.shell:
    cmd: |
      sqlite3 "/home/{{ user_name }}/pihole/etc-pihole/gravity.db" <<EOF
      DELETE FROM domainlist;
      DELETE FROM adlist
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Setup Allow and Block Lists
  ansible.builtin.shell:
    cmd: |
      sqlite3 "/home/{{ user_name }}/pihole/etc-pihole/gravity.db" <<EOF
      INSERT INTO domainlist (id, type, domain, enabled, comment) VALUES {{ item }}
      EOF
  loop: "{{ allow_block_list }}"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Setup Gravity Lists
  ansible.builtin.shell:
    cmd: |
      sqlite3 "/home/{{ user_name }}/pihole/etc-pihole/gravity.db" <<EOF
      INSERT INTO adlist (id, address, enabled, comment) VALUES {{ item }}
      EOF
  loop: "{{ adlist }}"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Custom Domains
  ansible.builtin.lineinfile:
    path: "/home/{{ user_name }}/pihole/etc-pihole/custom.list"
    line: "{{ item }}"
    create: "yes"
  loop: "{{ domains_list }}"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns tcp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns tcp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns udp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns udp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow http
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow http ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules ipv6
  community.general.iptables_state:
    ip_version: ipv6
    table: filter
    state: saved
    path: /etc/iptables/rules.v6
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Watchtower Container
  community.docker.docker_container:
    name: watchtower
    image: containrrr/watchtower:latest
    detach: yes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    pull: yes
