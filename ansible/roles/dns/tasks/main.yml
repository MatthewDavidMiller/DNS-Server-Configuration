---
# Credits

- name: Create unbound path
  ansible.builtin.file:
    path: /var/lib/unbound
    state: directory

- name: Download root hints
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: /var/lib/unbound/root.hints

- name: Start and enable unbound service
  ansible.builtin.systemd:
    name: unbound
    state: started
    enabled: "yes"

- name: Unbound configuration
  ansible.builtin.template:
    src: unbound_pihole.j2
    dest: /etc/unbound/unbound.conf.d/pi-hole.conf
    owner: root
    group: root
    mode: "0644"

- name: Add pihole Group
  ansible.builtin.group:
    name: pihole
    state: present

- name: Add Pihole user
  ansible.builtin.user:
    name: pihole
    groups: pihole
    append: "yes"
    password: "{{ pihole_password }}"

- name: Create Pihole path
  ansible.builtin.file:
    path: /etc/pihole
    state: directory
    owner: pihole
    group: pihole
    mode: "0644"

- name: Pihole Config
  ansible.builtin.template:
    src: setup_vars.j2
    dest: /etc/pihole/setupVars.conf
    owner: pihole
    group: pihole
    mode: "0644"

- name: Check if Pihole is installed
  ansible.builtin.stat:
    path: /usr/local/bin/pihole
  register: pihole_status

- name: Clone Pihole Repo
  ansible.builtin.git:
    repo: https://github.com/pi-hole/pi-hole.git
    dest: "/home/{{ user_name }}/Pi-hole"
  when: pihole_status.stat.exists == false

- name: Run Pihole Setup
  ansible.builtin.shell:
    cmd: |
      bash "/home/{{ user_name }}/Pi-hole/automated install/basic-install.sh" --unattended
  become: "true"
  when: pihole_status.stat.exists == false

- name: Setup Allow and Block Lists
  ansible.builtin.shell:
    cmd: |
      sqlite3 '/etc/pihole/gravity.db' <<EOF
      DELETE FROM domainlist;
      INSERT INTO domainlist (id, type, domain, enabled, comment) VALUES {{ item }}
      EOF
  loop: "{{ allow_block_list }}"

- name: Setup Gravity Lists
  ansible.builtin.shell:
    cmd: |
      sqlite3 '/etc/pihole/gravity.db' <<EOF
      DELETE FROM adlist;
      INSERT INTO adlist (id, address, enabled, comment) VALUES {{ item }}
      EOF
  loop: "{{ adlist }}"

- name: Custom Domains
  ansible.builtin.lineinfile:
    path: /etc/pihole/custom.list
    line: "{{ item }}"
    create: "yes"
  loop: "{{ domains_list }}"

- name: Allow dns tcp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"

- name: Allow dns tcp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"

- name: Allow dns udp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"

- name: Allow dns udp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"

- name: Allow http
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"

- name: Allow http ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"

- name: Allow https
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"

- name: Allow https ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"

- name: Save Iptables Rules
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4

- name: Save Iptables Rules ipv6
  community.general.iptables_state:
    ip_version: ipv6
    table: filter
    state: saved
    path: /etc/iptables/rules.v6
